<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>SimpTCP:  Fichier source de src/simptcp_api.c</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Généré par Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Recherche');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SimpTCP&#160;<span id="projectnumber">0</span></div>
   <div id="projectbrief">developpementde SimpTCP</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Page&#160;principale</span></a></li>
      <li><a href="annotated.html"><span>Structures&#160;de&#160;données</span></a></li>
      <li class="current"><a href="files.html"><span>Fichiers</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Recherche" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>Liste&#160;des&#160;fichiers</span></a></li>
      <li><a href="globals.html"><span>Portée&#160;globale</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">src/simptcp_api.c</div>  </div>
</div>
<div class="contents">
<a href="simptcp__api_8c.html">Aller à la documentation de ce fichier.</a><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;stdio.h&gt;</span>              <span class="comment">/* for printf() */</span>
<a name="l00007"></a>00007 <span class="preprocessor">#include &lt;stdlib.h&gt;</span>             <span class="comment">/* for malloc() */</span>
<a name="l00008"></a>00008 <span class="preprocessor">#include &lt;string.h&gt;</span>             <span class="comment">/* for memset() */</span>
<a name="l00009"></a>00009 <span class="preprocessor">#include &lt;unistd.h&gt;</span>             <span class="comment">/* for usleep() */</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;errno.h&gt;</span>              <span class="comment">/* for errno macros */</span>
<a name="l00011"></a>00011 <span class="preprocessor">#include &lt;<a class="code" href="simptcp__api_8h.html" title="{Define simptcp service primitives. Simptcp provides the same system calls as those of TCP}...">simptcp_api.h</a>&gt;</span>        <span class="comment">/* for simptcp related functions */</span>
<a name="l00012"></a>00012 <span class="preprocessor">#include &lt;<a class="code" href="simptcp__lib_8h.html" title="Defines the state variables needed by a simptcp protocol entity.">simptcp_lib.h</a>&gt;</span>       <span class="comment">/* for simptcp_core related functions */</span>
<a name="l00013"></a>00013 <span class="preprocessor">#include &lt;<a class="code" href="simptcp__entity_8h.html" title="Defines non socket dependent state variables (meaningful to all simpTCP sockets).These are wrapped up...">simptcp_entity.h</a>&gt;</span> 
<a name="l00014"></a>00014 <span class="preprocessor">#include &lt;libc_socket.h&gt;</span>        <span class="comment">/* for libc_related functions */</span>
<a name="l00015"></a>00015 <span class="preprocessor">#include &lt;term_colors.h&gt;</span>        <span class="comment">/* for color macros */</span>
<a name="l00016"></a>00016 <span class="preprocessor">#define __PREFIX__              &quot;[&quot; COLOR(&quot;SIMPTCP_API&quot;, BRIGHT_YELLOW) &quot; ] &quot;</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span><span class="preprocessor">#include &lt;term_io.h&gt;</span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#ifndef __DEBUG__</span>
<a name="l00020"></a>00020 <span class="preprocessor"></span><span class="preprocessor">#define __DEBUG__               1</span>
<a name="l00021"></a>00021 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 
<a name="l00024"></a>00024 
<a name="l00025"></a>00025 <span class="comment">/* determines if the descriptor is a simptcp descriptor  by looking at the</span>
<a name="l00026"></a>00026 <span class="comment"> * simptcp_descriptors table. if it is a simptcp descriptor the function </span>
<a name="l00027"></a>00027 <span class="comment"> * returns 1. Else, 0 is returned.</span>
<a name="l00028"></a>00028 <span class="comment"> */</span>
<a name="l00029"></a>00029 <span class="keywordtype">int</span> is_simptcp_descriptor(<span class="keywordtype">int</span> fd) 
<a name="l00030"></a>00030 {
<a name="l00031"></a>00031         <span class="keywordtype">int</span> res = 0;
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00034"></a>00034 <span class="preprocessor"></span>        printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00035"></a>00035 <span class="preprocessor">#endif</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span>
<a name="l00037"></a>00037         <span class="keywordflow">if</span> ((fd &gt;= 0) &amp;&amp; (fd &lt;= UINT16_MAX)) {
<a name="l00038"></a>00038                 res = (<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd] != NULL);
<a name="l00039"></a>00039         }
<a name="l00040"></a>00040 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00041"></a>00041 <span class="preprocessor"></span>        printf(<span class="stringliteral">&quot;descriptor %d %s a simptcp descriptor\n&quot;</span>, fd, res ? <span class="stringliteral">&quot;IS&quot;</span> : <span class="stringliteral">&quot;IS NOT&quot;</span>);
<a name="l00042"></a>00042 <span class="preprocessor">#endif</span>
<a name="l00043"></a>00043 <span class="preprocessor"></span>
<a name="l00044"></a>00044         <span class="keywordflow">return</span> res;
<a name="l00045"></a>00045 }
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 <span class="comment">/* determines if the socket we want to create is a simptcp socket or not. if the</span>
<a name="l00048"></a>00048 <span class="comment"> * parameters correspond to the creation of a simptcp socket, the function </span>
<a name="l00049"></a>00049 <span class="comment"> * returns 1. Else, 0 is returned.</span>
<a name="l00050"></a>00050 <span class="comment"> */</span>
<a name="l00051"></a>00051 <span class="keywordtype">int</span> is_simptcp_socket(<span class="keywordtype">int</span> domain, <span class="keywordtype">int</span> type, <span class="keywordtype">int</span> protocol)
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053         <span class="keywordtype">int</span> res = 0;
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00056"></a>00056 <span class="preprocessor"></span>        printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00057"></a>00057 <span class="preprocessor">#endif</span>
<a name="l00058"></a>00058 <span class="preprocessor"></span>
<a name="l00059"></a>00059         res = ((domain == AF_INET) &amp;&amp; (type == SOCK_STREAM) &amp;&amp;  
<a name="l00060"></a>00060                    (protocol == <a class="code" href="simptcp__api_8h.html#a0cc1f800552ba5bb91e47ea31a626a4f" title="{SimpTCP protocol number &lt;in.h&gt;}">IPPROTO_SIMPTCP</a>));
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00063"></a>00063 <span class="preprocessor"></span>        printf(<span class="stringliteral">&quot;socket (%d,%d,%d) %s a simptcp socket\n&quot;</span>,
<a name="l00064"></a>00064                    domain, type, protocol, res ? <span class="stringliteral">&quot;CREATES&quot;</span> : <span class="stringliteral">&quot;DOES NOT CREATE&quot;</span>);
<a name="l00065"></a>00065 <span class="preprocessor">#endif</span>
<a name="l00066"></a>00066 <span class="preprocessor"></span>
<a name="l00067"></a>00067         <span class="keywordflow">return</span> res;
<a name="l00068"></a>00068 }
<a name="l00069"></a>00069 
<a name="l00070"></a>00070 
<a name="l00071"></a>00071 
<a name="l00072"></a>00072 <span class="keywordtype">int</span> socket(<span class="keywordtype">int</span> domain, <span class="keywordtype">int</span> type, <span class="keywordtype">int</span> protocol)
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074 
<a name="l00075"></a>00075 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00076"></a>00076 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00077"></a>00077 <span class="preprocessor">#endif</span>
<a name="l00078"></a>00078 <span class="preprocessor"></span>
<a name="l00079"></a>00079     <span class="keywordflow">if</span> (!is_simptcp_socket(domain, type, protocol))
<a name="l00080"></a>00080       <span class="keywordflow">return</span> libc_socket(domain, type, protocol);
<a name="l00081"></a>00081     
<a name="l00082"></a>00082     <span class="comment">/* create a simptcp socket */</span>    
<a name="l00083"></a>00083     <span class="keywordflow">return</span> <a class="code" href="simptcp__lib_8c.html#adb6c0b75c241752fc5f4c54bf45c7869" title="cree un nouveau socket SimpTCP et l&#39;initialise. parcourt la table de descripteur a la recheche d&#39;une ...">create_simptcp_socket</a>();
<a name="l00084"></a>00084 }
<a name="l00085"></a>00085 
<a name="l00086"></a>00086 <span class="keywordtype">int</span> bind (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr, socklen_t len)
<a name="l00087"></a>00087 {
<a name="l00088"></a>00088 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00089"></a>00089 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00090"></a>00090 <span class="preprocessor">#endif</span>
<a name="l00091"></a>00091 <span class="preprocessor"></span>    
<a name="l00092"></a>00092     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00093"></a>00093         <span class="keywordflow">return</span> libc_bind(fd, addr, len);
<a name="l00094"></a>00094     }
<a name="l00095"></a>00095     <span class="keywordflow">if</span> (addr == NULL)
<a name="l00096"></a>00096       <span class="keywordflow">return</span> -EINVAL;
<a name="l00097"></a>00097     <span class="comment">/* Set the simptcp local socket with the binded one */</span>
<a name="l00098"></a>00098     memcpy(&amp;(<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd]-&gt;<a class="code" href="structsimptcp__socket.html#a06e621718f310613f27789e3d2d7fd8a">local_simptcp</a>), addr, len);
<a name="l00099"></a>00099     
<a name="l00100"></a>00100     <span class="keywordflow">return</span> 0;
<a name="l00101"></a>00101 }
<a name="l00102"></a>00102 
<a name="l00103"></a>00103 <span class="keywordtype">int</span> connect (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr, socklen_t len)
<a name="l00104"></a>00104 {
<a name="l00105"></a>00105 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00106"></a>00106 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00107"></a>00107 <span class="preprocessor">#endif</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span>    <span class="keyword">struct </span><a class="code" href="structsimptcp__socket.html" title="structure regroupant toutes les variables d&#39;etat specifiques a un socket simpTCP (voir diagramme des ...">simptcp_socket</a>* sock;
<a name="l00109"></a>00109  
<a name="l00110"></a>00110 
<a name="l00111"></a>00111     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00112"></a>00112         <span class="keywordflow">return</span> libc_connect(fd, addr, len);
<a name="l00113"></a>00113     }
<a name="l00114"></a>00114     <span class="comment">/* Here comes the code for the connect related to simptcp */</span>
<a name="l00115"></a>00115     sock=<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd];
<a name="l00116"></a>00116     <span class="keywordflow">return</span> sock-&gt;<a class="code" href="structsimptcp__socket.html#a8478b244ec3238b1067ba66a9687de1a">socket_state</a>-&gt;active_open(sock,(<span class="keyword">struct</span> sockaddr *)addr,len);
<a name="l00117"></a>00117 }
<a name="l00118"></a>00118 
<a name="l00119"></a>00119 ssize_t send (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags)
<a name="l00120"></a>00120 {
<a name="l00121"></a>00121     <span class="keyword">struct </span><a class="code" href="structsimptcp__socket.html" title="structure regroupant toutes les variables d&#39;etat specifiques a un socket simpTCP (voir diagramme des ...">simptcp_socket</a>* sock;
<a name="l00122"></a>00122 
<a name="l00123"></a>00123 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00124"></a>00124 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00125"></a>00125 <span class="preprocessor">#endif</span>
<a name="l00126"></a>00126 <span class="preprocessor"></span>
<a name="l00127"></a>00127     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00128"></a>00128         <span class="keywordflow">return</span> libc_send(fd, buf, n, flags);
<a name="l00129"></a>00129     }
<a name="l00130"></a>00130 
<a name="l00131"></a>00131     <span class="comment">/* Here comes the code for the send related to simptcp */</span>
<a name="l00132"></a>00132         sock=<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd];
<a name="l00133"></a>00133         <span class="keywordflow">return</span> sock-&gt;<a class="code" href="structsimptcp__socket.html#a8478b244ec3238b1067ba66a9687de1a">socket_state</a>-&gt;send(sock,buf,n,flags);
<a name="l00134"></a>00134 
<a name="l00135"></a>00135 }
<a name="l00136"></a>00136 
<a name="l00137"></a>00137 ssize_t recv (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags)
<a name="l00138"></a>00138 {
<a name="l00139"></a>00139     <span class="keyword">struct </span><a class="code" href="structsimptcp__socket.html" title="structure regroupant toutes les variables d&#39;etat specifiques a un socket simpTCP (voir diagramme des ...">simptcp_socket</a>* sock;
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00142"></a>00142 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00143"></a>00143 <span class="preprocessor">#endif</span>
<a name="l00144"></a>00144 <span class="preprocessor"></span>
<a name="l00145"></a>00145     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00146"></a>00146         <span class="keywordflow">return</span> libc_recv(fd, buf, n, flags);
<a name="l00147"></a>00147     }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149     <span class="comment">/* Here comes the code for the recv related to simptcp */</span>
<a name="l00150"></a>00150     
<a name="l00151"></a>00151 
<a name="l00152"></a>00152     sock=<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd];
<a name="l00153"></a>00153     <span class="keywordflow">return</span> sock-&gt;<a class="code" href="structsimptcp__socket.html#a8478b244ec3238b1067ba66a9687de1a">socket_state</a>-&gt;recv(sock,buf,n,flags);
<a name="l00154"></a>00154 }
<a name="l00155"></a>00155 
<a name="l00156"></a>00156 
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 <span class="keywordtype">int</span> listen (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> n)
<a name="l00159"></a>00159 {
<a name="l00160"></a>00160   <span class="keyword">struct </span><a class="code" href="structsimptcp__socket.html" title="structure regroupant toutes les variables d&#39;etat specifiques a un socket simpTCP (voir diagramme des ...">simptcp_socket</a>* sock;
<a name="l00161"></a>00161     
<a name="l00162"></a>00162 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00163"></a>00163 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00164"></a>00164 <span class="preprocessor">#endif</span>
<a name="l00165"></a>00165 <span class="preprocessor"></span>    
<a name="l00166"></a>00166     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00167"></a>00167         <span class="keywordflow">return</span> libc_listen(fd, n);
<a name="l00168"></a>00168     }
<a name="l00169"></a>00169 
<a name="l00170"></a>00170     <span class="comment">/* Here comes the code for the listen related to simtcp */</span>
<a name="l00171"></a>00171     <span class="keywordflow">if</span> (n &gt;= SOMAXCONN)
<a name="l00172"></a>00172         <span class="keywordflow">return</span> -EINVAL;
<a name="l00173"></a>00173 
<a name="l00174"></a>00174     sock=<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd];
<a name="l00175"></a>00175     <span class="keywordflow">return</span> sock-&gt;<a class="code" href="structsimptcp__socket.html#a8478b244ec3238b1067ba66a9687de1a">socket_state</a>-&gt;passive_open(sock,n);
<a name="l00176"></a>00176 
<a name="l00177"></a>00177     <span class="keywordflow">return</span> 0;
<a name="l00178"></a>00178 }
<a name="l00179"></a>00179 
<a name="l00180"></a>00180 <span class="keywordtype">int</span> accept (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> sockaddr *addr, socklen_t *addr_len)
<a name="l00181"></a>00181 {
<a name="l00182"></a>00182   <span class="keyword">struct </span><a class="code" href="structsimptcp__socket.html" title="structure regroupant toutes les variables d&#39;etat specifiques a un socket simpTCP (voir diagramme des ...">simptcp_socket</a>* sock;
<a name="l00183"></a>00183     
<a name="l00184"></a>00184 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00185"></a>00185 <span class="preprocessor"></span>  printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00186"></a>00186 <span class="preprocessor">#endif</span>
<a name="l00187"></a>00187 <span class="preprocessor"></span>  
<a name="l00188"></a>00188   <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00189"></a>00189     <span class="keywordflow">return</span> libc_accept(fd, addr, addr_len);
<a name="l00190"></a>00190   }
<a name="l00191"></a>00191   
<a name="l00192"></a>00192   <span class="comment">/* Here comes the code for the accept related to simtcp */</span>
<a name="l00193"></a>00193   sock=<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd];
<a name="l00194"></a>00194   <span class="keywordflow">return</span> sock-&gt;<a class="code" href="structsimptcp__socket.html#a8478b244ec3238b1067ba66a9687de1a">socket_state</a>-&gt;accept(sock,addr,addr_len);
<a name="l00195"></a>00195 }
<a name="l00196"></a>00196 
<a name="l00197"></a>00197 <span class="keywordtype">int</span> shutdown (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> how)
<a name="l00198"></a>00198 {
<a name="l00199"></a>00199   <span class="keyword">struct </span><a class="code" href="structsimptcp__socket.html" title="structure regroupant toutes les variables d&#39;etat specifiques a un socket simpTCP (voir diagramme des ...">simptcp_socket</a>* sock;
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00202"></a>00202 <span class="preprocessor"></span>  printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00203"></a>00203 <span class="preprocessor">#endif</span>
<a name="l00204"></a>00204 <span class="preprocessor"></span>        
<a name="l00205"></a>00205   <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd))
<a name="l00206"></a>00206     <span class="keywordflow">return</span> libc_shutdown(fd, how);
<a name="l00207"></a>00207   
<a name="l00208"></a>00208   <span class="comment">/* Here comes the code for the shutdown related to simtcp */</span>
<a name="l00209"></a>00209   sock=<a class="code" href="simptcp__entity_8h.html#a95a2d498f94719d95291b0e9fead599d" title="Variable globale instance de la structure simpTCP permettant a l&#39;entite protocolaire simpTCP (materia...">simptcp_entity</a>.<a class="code" href="structsimptcp.html#a651e45864ee47dd73831182cd8ed1cb9">simptcp_socket_descriptors</a>[fd];
<a name="l00210"></a>00210   <span class="keywordflow">return</span> sock-&gt;<a class="code" href="structsimptcp__socket.html#a8478b244ec3238b1067ba66a9687de1a">socket_state</a>-&gt;shutdown (sock,how);  
<a name="l00211"></a>00211 }
<a name="l00212"></a>00212 
<a name="l00213"></a>00213 <span class="keywordtype">int</span> close (<span class="keywordtype">int</span> fd)
<a name="l00214"></a>00214 {
<a name="l00215"></a>00215 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00216"></a>00216 <span class="preprocessor"></span>  printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00217"></a>00217 <span class="preprocessor">#endif</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>        
<a name="l00219"></a>00219   <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00220"></a>00220     <span class="keywordflow">return</span> libc_close(fd);
<a name="l00221"></a>00221   }
<a name="l00222"></a>00222 
<a name="l00223"></a>00223   <span class="comment">/* Here comes the code for the close related to simtcp */</span>
<a name="l00224"></a>00224 
<a name="l00225"></a>00225   <span class="keywordflow">return</span> shutdown(fd, SHUT_RDWR);
<a name="l00226"></a>00226 }
<a name="l00227"></a>00227 
<a name="l00228"></a>00228 ssize_t read (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n)
<a name="l00229"></a>00229 {
<a name="l00230"></a>00230 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00231"></a>00231 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00232"></a>00232 <span class="preprocessor">#endif</span>
<a name="l00233"></a>00233 <span class="preprocessor"></span>
<a name="l00234"></a>00234     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00235"></a>00235         <span class="keywordflow">return</span> libc_read(fd, buf, n);
<a name="l00236"></a>00236     }
<a name="l00237"></a>00237 
<a name="l00238"></a>00238     <span class="comment">/* Here comes the code for the read related to simtcp */</span>
<a name="l00239"></a>00239     <span class="keywordflow">return</span> recv(fd, buf, n, MSG_WAITALL);
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 ssize_t write (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n)
<a name="l00243"></a>00243 {
<a name="l00244"></a>00244 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00245"></a>00245 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00246"></a>00246 <span class="preprocessor">#endif</span>
<a name="l00247"></a>00247 <span class="preprocessor"></span>        
<a name="l00248"></a>00248     <span class="keywordflow">if</span> (!is_simptcp_descriptor(fd)) {
<a name="l00249"></a>00249         <span class="keywordflow">return</span> libc_write(fd, buf, n);
<a name="l00250"></a>00250     }
<a name="l00251"></a>00251 
<a name="l00252"></a>00252     <span class="comment">/* Here comes the code for the xxxx related to simtcp */</span>
<a name="l00253"></a>00253     <span class="keywordflow">return</span> send(fd, buf, n, 0);
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 <span class="keywordtype">int</span> getsockname (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> sockaddr *addr, socklen_t *len)
<a name="l00257"></a>00257 {
<a name="l00258"></a>00258 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00259"></a>00259 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00260"></a>00260 <span class="preprocessor">#endif</span>
<a name="l00261"></a>00261 <span class="preprocessor"></span>
<a name="l00262"></a>00262     <span class="keywordflow">return</span> libc_getsockname(fd, addr, len);
<a name="l00263"></a>00263 }
<a name="l00264"></a>00264 
<a name="l00265"></a>00265 <span class="keywordtype">int</span> getpeername (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> sockaddr *addr, socklen_t *len)
<a name="l00266"></a>00266 {
<a name="l00267"></a>00267 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00269"></a>00269 <span class="preprocessor">#endif</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span>        
<a name="l00271"></a>00271     <span class="keywordflow">return</span> libc_getpeername(fd, addr, len);
<a name="l00272"></a>00272 }
<a name="l00273"></a>00273 
<a name="l00274"></a>00274 <span class="comment">// TODO : Hide the fact that an udp socket is used in reality.</span>
<a name="l00275"></a>00275 <span class="keywordtype">int</span> getsockopt (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> optname, <span class="keywordtype">void</span> *optval, 
<a name="l00276"></a>00276                 socklen_t *optlen)
<a name="l00277"></a>00277 {
<a name="l00278"></a>00278 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00279"></a>00279 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00280"></a>00280 <span class="preprocessor">#endif</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span>   
<a name="l00282"></a>00282     <span class="keywordflow">return</span> libc_getsockopt(fd, level, optname, optval, optlen);
<a name="l00283"></a>00283 }
<a name="l00284"></a>00284 
<a name="l00285"></a>00285 <span class="comment">// TODO: Prevent some setsockopt() parameters values.</span>
<a name="l00286"></a>00286 <span class="keywordtype">int</span> setsockopt (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> optname, <span class="keyword">const</span> <span class="keywordtype">void</span> *optval, 
<a name="l00287"></a>00287                 socklen_t optlen)
<a name="l00288"></a>00288 {
<a name="l00289"></a>00289 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00290"></a>00290 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00291"></a>00291 <span class="preprocessor">#endif</span>
<a name="l00292"></a>00292 <span class="preprocessor"></span> 
<a name="l00293"></a>00293     <span class="keywordflow">return</span> libc_setsockopt(fd, level,optname, optval, optlen);
<a name="l00294"></a>00294 }
<a name="l00295"></a>00295 
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 <span class="comment">/* vim: set expandtab ts=4 sw=4 tw=80: */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Tout</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Structures de données</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Fichiers</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Fonctions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Définition de type</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Énumérations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Macros</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Généré le Fri Apr 5 2013 pour SimpTCP par&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
