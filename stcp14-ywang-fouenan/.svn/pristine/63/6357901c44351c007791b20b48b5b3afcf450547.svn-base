<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<title>SimpTCP:  Fichier source de src/libc_socket.c</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css"/>
</head>
<body onload='searchBox.OnSelectItem(0);'>
<!-- Généré par Doxygen 1.7.4 -->
<script type="text/javascript"><!--
var searchBox = new SearchBox("searchBox", "search",false,'Recherche');
--></script>
<div id="top">
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">SimpTCP&#160;<span id="projectnumber">0</span></div>
   <div id="projectbrief">developpementde SimpTCP</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.html"><span>Page&#160;principale</span></a></li>
      <li><a href="annotated.html"><span>Structures&#160;de&#160;données</span></a></li>
      <li class="current"><a href="files.html"><span>Fichiers</span></a></li>
      <li id="searchli">
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Recherche" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.html"><span>Liste&#160;des&#160;fichiers</span></a></li>
      <li><a href="globals.html"><span>Portée&#160;globale</span></a></li>
    </ul>
  </div>
<div class="header">
  <div class="headertitle">
<div class="title">src/libc_socket.c</div>  </div>
</div>
<div class="contents">
<div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 <span class="comment">/*</span>
<a name="l00002"></a>00002 <span class="comment"> * libc_socket.c</span>
<a name="l00003"></a>00003 <span class="comment"> */</span>
<a name="l00004"></a>00004 
<a name="l00005"></a>00005 <span class="preprocessor">#include &lt;stdio.h&gt;</span>              <span class="comment">/* for printf() */</span>
<a name="l00006"></a>00006 <span class="preprocessor">#include &lt;netdb.h&gt;</span>              <span class="comment">/* for struct sockaddr and socklen_t */</span>
<a name="l00007"></a>00007 
<a name="l00008"></a>00008 <span class="preprocessor">#define __USE_GNU</span>
<a name="l00009"></a>00009 <span class="preprocessor"></span><span class="preprocessor">#include &lt;dlfcn.h&gt;</span>              <span class="comment">/* for dlsym(), */</span>
<a name="l00010"></a>00010 <span class="preprocessor">#include &lt;term_colors.h&gt;</span>        <span class="comment">/* for color macros */</span>
<a name="l00011"></a>00011 <span class="preprocessor">#define __PREFIX__              &quot;[&quot; COLOR(&quot;LIBC-SOCKET&quot;, BRIGHT_BLUE) &quot; ] &quot;</span>
<a name="l00012"></a>00012 <span class="preprocessor"></span><span class="preprocessor">#include &lt;term_io.h&gt;</span>            <span class="comment">/* for printf() and perror() redefinitions */</span>
<a name="l00013"></a>00013 
<a name="l00014"></a>00014 <span class="preprocessor">#ifndef __DEBUG__</span>
<a name="l00015"></a>00015 <span class="preprocessor"></span><span class="preprocessor">#define __DEBUG__               1</span>
<a name="l00016"></a>00016 <span class="preprocessor"></span><span class="preprocessor">#endif</span>
<a name="l00017"></a>00017 <span class="preprocessor"></span>
<a name="l00018"></a>00018 
<a name="l00019"></a>00019 <span class="preprocessor">#define INIT_FUNCTION_POINTER(funcname)                         \</span>
<a name="l00020"></a>00020 <span class="preprocessor">    if (!funcname ## _ptr)                                      \</span>
<a name="l00021"></a>00021 <span class="preprocessor">        funcname ## _ptr = dlsym(RTLD_NEXT, #funcname)</span>
<a name="l00022"></a>00022 <span class="preprocessor"></span>
<a name="l00023"></a>00023 <span class="preprocessor">#define CHECK_FUNCTION_POINTER(funcname)                        \</span>
<a name="l00024"></a>00024 <span class="preprocessor">    if (!funcname ## _ptr) {                                    \</span>
<a name="l00025"></a>00025 <span class="preprocessor">        printf(&quot;Unable to resolve symbol %s\n&quot;, #funcname);     \</span>
<a name="l00026"></a>00026 <span class="preprocessor">        return -1;                                              \</span>
<a name="l00027"></a>00027 <span class="preprocessor">    }</span>
<a name="l00028"></a>00028 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">/* Some function pointers to the libc */</span>
<a name="l00030"></a>00030 <span class="keyword">static</span> int (*socket_ptr) (<span class="keywordtype">int</span> domain, <span class="keywordtype">int</span> type, <span class="keywordtype">int</span> protocol);
<a name="l00031"></a>00031 <span class="keyword">static</span> int (*bind_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct </span>sockaddr *addr, socklen_t len);
<a name="l00032"></a>00032 <span class="keyword">static</span> int (*connect_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct </span>sockaddr *addr, socklen_t len);
<a name="l00033"></a>00033 <span class="keyword">static</span> ssize_t (*send_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags);
<a name="l00034"></a>00034 <span class="keyword">static</span> ssize_t (*recv_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags);
<a name="l00035"></a>00035 <span class="keyword">static</span> ssize_t (*sendto_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags, 
<a name="l00036"></a>00036                               <span class="keyword">const</span> <span class="keyword">struct </span>sockaddr *addr, socklen_t addr_len);
<a name="l00037"></a>00037 <span class="keyword">static</span> ssize_t (*recvfrom_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags, 
<a name="l00038"></a>00038                                 <span class="keyword">struct </span>sockaddr *addr, socklen_t *addr_len);
<a name="l00039"></a>00039 <span class="keyword">static</span> ssize_t (*sendmsg_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct </span>msghdr *message, <span class="keywordtype">int</span> flags);
<a name="l00040"></a>00040 <span class="keyword">static</span> ssize_t (*recvmsg_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">struct </span>msghdr *message, <span class="keywordtype">int</span> flags);
<a name="l00041"></a>00041 <span class="keyword">static</span> int (*listen_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> n);
<a name="l00042"></a>00042 <span class="keyword">static</span> int (*accept_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">struct </span>sockaddr *addr, socklen_t *addr_len);
<a name="l00043"></a>00043 <span class="keyword">static</span> int (*shutdown_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> how);
<a name="l00044"></a>00044 <span class="keyword">static</span> int (*close_ptr) (<span class="keywordtype">int</span> fildes);
<a name="l00045"></a>00045 <span class="keyword">static</span> ssize_t (*read_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> nbytes);
<a name="l00046"></a>00046 <span class="keyword">static</span> ssize_t (*write_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n);
<a name="l00047"></a>00047 <span class="keyword">static</span> int (*getsockname_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">struct </span>sockaddr *addr, socklen_t *len);
<a name="l00048"></a>00048 <span class="keyword">static</span> int (*getpeername_ptr) (<span class="keywordtype">int</span> fd, <span class="keyword">struct </span>sockaddr *addr, socklen_t *len);
<a name="l00049"></a>00049 <span class="keyword">static</span> int (*getsockopt_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> optname, <span class="keywordtype">void</span> *optval,
<a name="l00050"></a>00050                              socklen_t *optlen);
<a name="l00051"></a>00051 <span class="keyword">static</span> int (*setsockopt_ptr) (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> optname, <span class="keyword">const</span> <span class="keywordtype">void</span> *optval,
<a name="l00052"></a>00052                              socklen_t optlen);
<a name="l00053"></a>00053 
<a name="l00054"></a>00054 <span class="comment">/* Functions that wraps the libc. Basically initialize a function pointer the</span>
<a name="l00055"></a>00055 <span class="comment"> * first time a function is called, and then directly call the libc socket api</span>
<a name="l00056"></a>00056 <span class="comment"> */</span>
<a name="l00057"></a>00057 <span class="keywordtype">int</span> libc_socket(<span class="keywordtype">int</span> domain, <span class="keywordtype">int</span> type, <span class="keywordtype">int</span> protocol)
<a name="l00058"></a>00058 {
<a name="l00059"></a>00059 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00060"></a>00060 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00061"></a>00061 <span class="preprocessor">#endif</span>
<a name="l00062"></a>00062 <span class="preprocessor"></span>
<a name="l00063"></a>00063     INIT_FUNCTION_POINTER(socket);
<a name="l00064"></a>00064     CHECK_FUNCTION_POINTER(socket);
<a name="l00065"></a>00065 
<a name="l00066"></a>00066     <span class="keywordflow">return</span> socket_ptr(domain, type, protocol);
<a name="l00067"></a>00067 }
<a name="l00068"></a>00068 
<a name="l00069"></a>00069 <span class="keywordtype">int</span> libc_bind (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr, socklen_t len)
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00072"></a>00072 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00073"></a>00073 <span class="preprocessor">#endif</span>
<a name="l00074"></a>00074 <span class="preprocessor"></span>
<a name="l00075"></a>00075     INIT_FUNCTION_POINTER(bind);
<a name="l00076"></a>00076     CHECK_FUNCTION_POINTER(bind);
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="keywordflow">return</span> bind_ptr(fd, addr, len);
<a name="l00079"></a>00079 }
<a name="l00080"></a>00080 
<a name="l00081"></a>00081 <span class="keywordtype">int</span> libc_connect (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr, socklen_t len)
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00084"></a>00084 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00085"></a>00085 <span class="preprocessor">#endif</span>
<a name="l00086"></a>00086 <span class="preprocessor"></span>
<a name="l00087"></a>00087     INIT_FUNCTION_POINTER(connect);
<a name="l00088"></a>00088     CHECK_FUNCTION_POINTER(connect);
<a name="l00089"></a>00089 
<a name="l00090"></a>00090     <span class="keywordflow">return</span> connect_ptr(fd, addr, len);
<a name="l00091"></a>00091 }
<a name="l00092"></a>00092 
<a name="l00093"></a>00093 ssize_t libc_send (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags)
<a name="l00094"></a>00094 {
<a name="l00095"></a>00095 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00096"></a>00096 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00097"></a>00097 <span class="preprocessor">#endif</span>
<a name="l00098"></a>00098 <span class="preprocessor"></span>
<a name="l00099"></a>00099     INIT_FUNCTION_POINTER(send);
<a name="l00100"></a>00100     CHECK_FUNCTION_POINTER(send);
<a name="l00101"></a>00101 
<a name="l00102"></a>00102     <span class="keywordflow">return</span> send_ptr(fd, buf, n, flags);
<a name="l00103"></a>00103 }
<a name="l00104"></a>00104 
<a name="l00105"></a>00105 ssize_t libc_recv (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags)
<a name="l00106"></a>00106 {
<a name="l00107"></a>00107 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00108"></a>00108 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00109"></a>00109 <span class="preprocessor">#endif</span>
<a name="l00110"></a>00110 <span class="preprocessor"></span>
<a name="l00111"></a>00111     INIT_FUNCTION_POINTER(recv);
<a name="l00112"></a>00112     CHECK_FUNCTION_POINTER(recv);
<a name="l00113"></a>00113     
<a name="l00114"></a>00114     <span class="keywordflow">return</span> recv_ptr(fd, buf, n, flags);
<a name="l00115"></a>00115 }
<a name="l00116"></a>00116 
<a name="l00117"></a>00117 ssize_t libc_sendto(<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags, 
<a name="l00118"></a>00118                     <span class="keyword">const</span> <span class="keyword">struct</span> sockaddr *addr, socklen_t addr_len) 
<a name="l00119"></a>00119 {
<a name="l00120"></a>00120 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00121"></a>00121 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00122"></a>00122 <span class="preprocessor">#endif</span>
<a name="l00123"></a>00123 <span class="preprocessor"></span>
<a name="l00124"></a>00124     INIT_FUNCTION_POINTER(sendto);
<a name="l00125"></a>00125     CHECK_FUNCTION_POINTER(sendto);
<a name="l00126"></a>00126     
<a name="l00127"></a>00127     <span class="keywordflow">return</span> sendto_ptr(fd, buf, n, flags, addr, addr_len);
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 ssize_t libc_recvfrom(<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n, <span class="keywordtype">int</span> flags, 
<a name="l00130"></a>00130                       <span class="keyword">struct</span> sockaddr *addr, socklen_t *addr_len)
<a name="l00131"></a>00131 {
<a name="l00132"></a>00132   <span class="comment">//#if __DEBUG__</span>
<a name="l00133"></a>00133   <span class="comment">//printf(&quot;function %s called\n&quot;, __func__);</span>
<a name="l00134"></a>00134   <span class="comment">//#endif</span>
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     INIT_FUNCTION_POINTER(recvfrom);
<a name="l00137"></a>00137     CHECK_FUNCTION_POINTER(recvfrom);
<a name="l00138"></a>00138     
<a name="l00139"></a>00139     <span class="keywordflow">return</span> recvfrom_ptr(fd, buf, n, flags, addr, addr_len);
<a name="l00140"></a>00140 }
<a name="l00141"></a>00141 
<a name="l00142"></a>00142 ssize_t libc_sendmsg (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keyword">struct</span> msghdr *message, <span class="keywordtype">int</span> flags)
<a name="l00143"></a>00143 {
<a name="l00144"></a>00144 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00145"></a>00145 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00146"></a>00146 <span class="preprocessor">#endif</span>
<a name="l00147"></a>00147 <span class="preprocessor"></span>
<a name="l00148"></a>00148     INIT_FUNCTION_POINTER(sendmsg);
<a name="l00149"></a>00149     CHECK_FUNCTION_POINTER(sendmsg);
<a name="l00150"></a>00150 
<a name="l00151"></a>00151     <span class="keywordflow">return</span> sendmsg_ptr(fd, message, flags);
<a name="l00152"></a>00152 }
<a name="l00153"></a>00153 
<a name="l00154"></a>00154 ssize_t libc_recvmsg (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> msghdr *message, <span class="keywordtype">int</span> flags)
<a name="l00155"></a>00155 {
<a name="l00156"></a>00156 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00157"></a>00157 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00158"></a>00158 <span class="preprocessor">#endif</span>
<a name="l00159"></a>00159 <span class="preprocessor"></span>
<a name="l00160"></a>00160     INIT_FUNCTION_POINTER(recvmsg);
<a name="l00161"></a>00161     CHECK_FUNCTION_POINTER(recvmsg);
<a name="l00162"></a>00162 
<a name="l00163"></a>00163     <span class="keywordflow">return</span> recvmsg_ptr(fd, message, flags);
<a name="l00164"></a>00164 }
<a name="l00165"></a>00165 
<a name="l00166"></a>00166 
<a name="l00167"></a>00167 <span class="keywordtype">int</span> libc_listen (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> n)
<a name="l00168"></a>00168 {
<a name="l00169"></a>00169 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00170"></a>00170 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00171"></a>00171 <span class="preprocessor">#endif</span>
<a name="l00172"></a>00172 <span class="preprocessor"></span>
<a name="l00173"></a>00173     INIT_FUNCTION_POINTER(listen);
<a name="l00174"></a>00174     CHECK_FUNCTION_POINTER(listen);
<a name="l00175"></a>00175 
<a name="l00176"></a>00176     <span class="keywordflow">return</span> listen_ptr(fd, n);
<a name="l00177"></a>00177 }
<a name="l00178"></a>00178 
<a name="l00179"></a>00179 <span class="keywordtype">int</span> libc_accept (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> sockaddr *addr, socklen_t *addr_len)
<a name="l00180"></a>00180 {
<a name="l00181"></a>00181 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00182"></a>00182 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00183"></a>00183 <span class="preprocessor">#endif</span>
<a name="l00184"></a>00184 <span class="preprocessor"></span>
<a name="l00185"></a>00185     INIT_FUNCTION_POINTER(accept);
<a name="l00186"></a>00186     CHECK_FUNCTION_POINTER(accept);
<a name="l00187"></a>00187 
<a name="l00188"></a>00188     <span class="keywordflow">return</span> accept_ptr(fd, addr, addr_len);
<a name="l00189"></a>00189 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 <span class="keywordtype">int</span> libc_shutdown (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> how)
<a name="l00192"></a>00192 {
<a name="l00193"></a>00193 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00194"></a>00194 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00195"></a>00195 <span class="preprocessor">#endif</span>
<a name="l00196"></a>00196 <span class="preprocessor"></span>
<a name="l00197"></a>00197     INIT_FUNCTION_POINTER(shutdown);
<a name="l00198"></a>00198     CHECK_FUNCTION_POINTER(shutdown);
<a name="l00199"></a>00199     
<a name="l00200"></a>00200     <span class="keywordflow">return</span> shutdown_ptr(fd, how);
<a name="l00201"></a>00201 }
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 <span class="keywordtype">int</span> libc_close (<span class="keywordtype">int</span> fd)
<a name="l00204"></a>00204 {
<a name="l00205"></a>00205 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00206"></a>00206 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00207"></a>00207 <span class="preprocessor">#endif</span>
<a name="l00208"></a>00208 <span class="preprocessor"></span>
<a name="l00209"></a>00209     INIT_FUNCTION_POINTER(close);
<a name="l00210"></a>00210     CHECK_FUNCTION_POINTER(close);
<a name="l00211"></a>00211 
<a name="l00212"></a>00212     <span class="keywordflow">return</span> close_ptr(fd);
<a name="l00213"></a>00213 }
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 ssize_t libc_read (<span class="keywordtype">int</span> fd, <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n)
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00218"></a>00218 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00219"></a>00219 <span class="preprocessor">#endif</span>
<a name="l00220"></a>00220 <span class="preprocessor"></span>
<a name="l00221"></a>00221     INIT_FUNCTION_POINTER(read);
<a name="l00222"></a>00222     CHECK_FUNCTION_POINTER(read);
<a name="l00223"></a>00223 
<a name="l00224"></a>00224     <span class="keywordflow">return</span> read_ptr(fd, buf, n);
<a name="l00225"></a>00225 }
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 ssize_t libc_write (<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">void</span> *buf, <span class="keywordtype">size_t</span> n)
<a name="l00228"></a>00228 {
<a name="l00229"></a>00229 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00230"></a>00230 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00231"></a>00231 <span class="preprocessor">#endif</span>
<a name="l00232"></a>00232 <span class="preprocessor"></span>
<a name="l00233"></a>00233     INIT_FUNCTION_POINTER(write);
<a name="l00234"></a>00234     CHECK_FUNCTION_POINTER(write);
<a name="l00235"></a>00235 
<a name="l00236"></a>00236     <span class="keywordflow">return</span> write_ptr(fd, buf, n);
<a name="l00237"></a>00237 }
<a name="l00238"></a>00238 
<a name="l00239"></a>00239 <span class="keywordtype">int</span> libc_getsockname (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> sockaddr *addr, socklen_t *len)
<a name="l00240"></a>00240 {
<a name="l00241"></a>00241 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00242"></a>00242 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00243"></a>00243 <span class="preprocessor">#endif</span>
<a name="l00244"></a>00244 <span class="preprocessor"></span>
<a name="l00245"></a>00245     INIT_FUNCTION_POINTER(getsockname);
<a name="l00246"></a>00246     CHECK_FUNCTION_POINTER(getsockname);
<a name="l00247"></a>00247 
<a name="l00248"></a>00248     <span class="keywordflow">return</span> getsockname_ptr(fd, addr, len);
<a name="l00249"></a>00249 }
<a name="l00250"></a>00250 
<a name="l00251"></a>00251 <span class="keywordtype">int</span> libc_getpeername (<span class="keywordtype">int</span> fd, <span class="keyword">struct</span> sockaddr *addr, socklen_t *len)
<a name="l00252"></a>00252 {
<a name="l00253"></a>00253 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00254"></a>00254 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00255"></a>00255 <span class="preprocessor">#endif</span>
<a name="l00256"></a>00256 <span class="preprocessor"></span>
<a name="l00257"></a>00257     INIT_FUNCTION_POINTER(getpeername);
<a name="l00258"></a>00258     CHECK_FUNCTION_POINTER(getpeername);
<a name="l00259"></a>00259 
<a name="l00260"></a>00260     <span class="keywordflow">return</span> getpeername_ptr(fd, addr, len);
<a name="l00261"></a>00261 }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00264"></a>00264 <span class="keywordtype">int</span> libc_getsockopt (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> optname, <span class="keywordtype">void</span> *optval, 
<a name="l00265"></a>00265                      socklen_t *optlen)
<a name="l00266"></a>00266 {
<a name="l00267"></a>00267 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00268"></a>00268 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00269"></a>00269 <span class="preprocessor">#endif</span>
<a name="l00270"></a>00270 <span class="preprocessor"></span>
<a name="l00271"></a>00271     INIT_FUNCTION_POINTER(getsockopt);
<a name="l00272"></a>00272     CHECK_FUNCTION_POINTER(getsockopt);
<a name="l00273"></a>00273 
<a name="l00274"></a>00274     <span class="keywordflow">return</span> getsockopt_ptr(fd, level, optname, optval, optlen);
<a name="l00275"></a>00275 }
<a name="l00276"></a>00276 
<a name="l00277"></a>00277 <span class="keywordtype">int</span> libc_setsockopt (<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> level, <span class="keywordtype">int</span> optname, <span class="keyword">const</span> <span class="keywordtype">void</span> *optval,
<a name="l00278"></a>00278                      socklen_t optlen)
<a name="l00279"></a>00279 {
<a name="l00280"></a>00280 <span class="preprocessor">#if __DEBUG__</span>
<a name="l00281"></a>00281 <span class="preprocessor"></span>    printf(<span class="stringliteral">&quot;function %s called\n&quot;</span>, __func__);
<a name="l00282"></a>00282 <span class="preprocessor">#endif</span>
<a name="l00283"></a>00283 <span class="preprocessor"></span>
<a name="l00284"></a>00284     INIT_FUNCTION_POINTER(setsockopt);
<a name="l00285"></a>00285     CHECK_FUNCTION_POINTER(setsockopt);
<a name="l00286"></a>00286 
<a name="l00287"></a>00287     <span class="keywordflow">return</span> setsockopt_ptr(fd, level, optname, optval, optlen);
<a name="l00288"></a>00288 }
<a name="l00289"></a>00289 
<a name="l00290"></a>00290 <span class="comment">/* vim: set expandtab ts=4 sw=4 tw=80: */</span>
</pre></div></div>
</div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>Tout</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Structures de données</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Fichiers</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Fonctions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Définition de type</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Énumérations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Macros</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<hr class="footer"/><address class="footer"><small>Généré le Fri Apr 5 2013 pour SimpTCP par&#160;
<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.7.4 </small></address>
</body>
</html>
